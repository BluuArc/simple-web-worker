{"version":3,"file":"sww.min.js","sources":["../src/_postAll.js","../src/utils.js","../src/_createDisposableWorker.js","../src/_run.js","../src/_post.js","../src/_register.js","../src/_unregister.js","../src/_createReusableWorker.js","../src/_create.js","../src/index.js"],"sourcesContent":["import { _isArrayOfArrays, _isArrayOfObjects, _isArrayOfStrings } from './utils'\n\nconst __errorMsg = arr =>\n  'You should provide an array of strings, an array of objects, an array of arrays or no arguments.' +\n  `\\nReceived: ${JSON.stringify(arr)}`\n\nconst __errorMsgWrongLenght = actualLength => expectedLength =>\n  'You should provide the same number of [args] as the number of registered actions on the worker.' +\n  `\\nThis worker has ${expectedLength} actions registered.` +\n  `\\nNumber of [args] received: ${actualLength}`\n\nconst __errorMsgWrongObjects = arr =>\n  'Every object of the array must contain the following fields:\\n* message\\n* args' +\n  `\\nReceived: ${JSON.stringify(arr)}`\n\nfunction _postAll (arr = []) {\n  if (!Array.isArray(arr)) {\n    console.error(new TypeError(__errorMsg(arr)))\n    return null\n  }\n\n  const __isArraysArray = _isArrayOfArrays(arr)\n  const __isObjectsArray = _isArrayOfObjects(arr)\n  const __isStringsArray = _isArrayOfStrings(arr)\n\n  if (!(__isArraysArray || __isObjectsArray || __isStringsArray)) {\n    console.error(new TypeError(__errorMsg(arr)))\n    return null\n  }\n\n  if (arr.length === 0) return Promise.all(this.actions.map(({ message }) => this.postMessage(message)))\n\n  if (__isStringsArray) return Promise.all(arr.map(msg => this.postMessage(msg)))\n\n  if (__isObjectsArray) {\n    const invalidArray = arr.some(obj => !obj.hasOwnProperty('message') || !obj.hasOwnProperty('args'))\n    if (invalidArray) {\n      console.error(new TypeError(__errorMsgWrongObjects(arr)))\n      return null\n    }\n    return Promise.all(arr.map(({ message, args }) => this.postMessage(message, args)))\n  }\n\n  if (__isArraysArray) {\n    if (arr.length !== this.actions.length) {\n      console.error(new TypeError(__errorMsgWrongLenght(arr.length)(this.actions.length)))\n      return null\n    }\n    return Promise.all(arr.map((args, index) => this.postMessage(this.actions[index].message, args)))\n  }\n\n  return null\n}\n\nexport { _postAll }\n","const __invalidActions = (actions = null) => (types = null) => {\n  if (Array.isArray(actions)) {\n    if (types === 'objectsArray') return actions.some(action => typeof action !== 'object' || Array.isArray(action) || action === null)\n    if (types === 'stringsArray') return actions.some(action => typeof action !== 'string')\n  }\n  return false\n}\n\nconst __isArrayOf = type => arr => {\n  let testItems = null\n  if (type === 'arrays') testItems = item => Array.isArray(item)\n  if (type === 'objects') testItems = item => typeof item === 'object' && !Array.isArray(item)\n  if (type === 'strings') testItems = item => typeof item === 'string'\n\n  if (testItems) return arr.every(testItems)\n  return false\n}\n\nconst __isValidArgument = arg => (types = null) => {\n  if (types === 'null') return arg === null\n\n  if (types === 'undefined') return arg === undefined\n\n  if (Array.isArray(types)) return types.some(type => __isValidArgument(arg)(type))\n\n  if (!arg || __wrongType(arg, types) || __invalidActions(arg)(types)) return false\n  return true\n}\n\nconst __wrongType = (obj = null, type = '') => {\n  if (Array.isArray(type)) return type.every(type => __wrongType(obj, type))\n\n  if (Array.isArray(obj)) {\n    if (type === 'objectsArray' || type === 'stringsArray' || type === 'array') return false\n    return true\n  }\n\n  return typeof obj !== type.toString() // eslint-disable-line\n}\n\nconst _isArrayOfArrays = arr => __isArrayOf('arrays')(arr)\nconst _isArrayOfObjects = arr => __isArrayOf('objects')(arr)\nconst _isArrayOfStrings = arr => __isArrayOf('strings')(arr)\n\nconst _isValidArgument = arg => (types = null) => (errorMsg = '') => {\n  if (Array.isArray(types)) {\n    const valid = types.some(type => __isValidArgument(arg)(type))\n    if (!valid) console.error(new TypeError(errorMsg))\n    return valid\n  }\n\n  if (!arg || __wrongType(arg, types) || __invalidActions(arg)(types)) {\n    console.error(new TypeError(errorMsg))\n    return false\n  }\n  return true\n}\n\nexport { _isArrayOfArrays, _isArrayOfObjects, _isArrayOfStrings, _isValidArgument }\n","const __disposablePost = worker => message =>\n  new Promise((resolve, reject) => {\n    worker.onmessage = event => resolve(event.data)\n    worker.onerror = e => {\n      console.error(`Error: Line ${e.lineno} in ${e.filename}: ${e.message}`)\n      reject(e)\n    }\n    worker.postMessage({ message })\n  })\n\nconst _createDisposableWorker = response => {\n  const URL = window.URL || window.webkitURL\n  const blob = new Blob([response], { type: 'application/javascript' }) // eslint-disable-line\n  const worker = new Worker(URL.createObjectURL(blob)) // eslint-disable-line\n\n  worker.post = __disposablePost(worker)\n\n  return worker\n}\n\nexport { _createDisposableWorker }\n","import { _isValidArgument } from './utils'\nimport { _createDisposableWorker } from './_createDisposableWorker'\n\nconst __createSinglePromise = ({response, args}) => _createDisposableWorker(response).post({ args })\n\nconst __makeResponse = work => `\n  self.onmessage = event => {\n    const args = event.data.message.args\n    if (args) {\n      self.postMessage(${work}.apply(null, args))\n      return close()\n    }\n    self.postMessage(${work}())\n    return close()\n  }\n`\n\nconst __run = ({ work, args }) => {\n  const response = __makeResponse(work)\n  return __createSinglePromise({ response, args })\n}\n\nconst __errorMsg = type => arg => {\n  try {\n    return `You should provide ${type}.\\nReceived: ${JSON.stringify(arg)}`\n  } catch (err) {\n    if (err.message === 'Converting circular structure to JSON') {\n      return `You should provide ${type}.\\nReceived a circular structure: ${arg}`\n    }\n    console.error(err)\n    return `You should provide something else...`\n  }\n}\n\nconst _run = (work = null, args) => {\n  const errors = []\n  const __errorMsgWork = __errorMsg('a function')(work)\n  const __errorMsgArgs = __errorMsg('an array')(args)\n\n  if (!_isValidArgument(work)('function')(__errorMsgWork)) {\n    errors.push(__errorMsgWork)\n  }\n  if (!_isValidArgument(args)(['array', 'undefined'])(__errorMsgArgs)) {\n    errors.push(__errorMsgArgs)\n  }\n\n  if (errors.length === 0) {\n    return __run({ work, args })\n  }\n  return null\n}\n\nexport { _run }\n","import { _isValidArgument } from './utils'\nimport { _run } from './_run'\n\nconst __errorMsg = msg => `You should provide a string.\\nReceived: ${JSON.stringify(msg)}`\n\nconst _post = actions => (msg = null, args) => {\n  if (_isValidArgument(msg)('string')(__errorMsg(msg))) {\n    let work = actions\n      .filter(({ message }) => JSON.stringify(message) === JSON.stringify(msg))\n      .map(action => action.func)\n      .pop()\n\n    if (!work) {\n      work = function (msg) {\n        console.warn(`WARN! ${msg} is not a registered action for this worker`)\n        return `${msg} is not a registered action for this worker`\n      }\n      args = JSON.stringify(msg)\n      return _run(work, [args])\n    }\n\n    if (args) return _run(work, args)\n    return _run(work)\n  }\n\n  return null\n}\n\nexport { _post }\n","import { _isValidArgument } from './utils'\n\nconst __errorMsg = action =>\n  'You should provide an array of actions or an action. ' +\n  'Every action should be an object containing two fields: `message` and `func`.' +\n  `\\nReceived: ${JSON.stringify(action)}`\n\nconst __pushInto = actions => action => actions.push(action)\n\nconst _register = actions => (obj = null) => {\n  if (_isValidArgument(obj)(['object', 'objectsArray'])(__errorMsg(obj))) {\n    if (Array.isArray(obj)) {\n      obj.forEach(__pushInto(actions))\n      return actions.length\n    }\n    return __pushInto(actions)(obj)\n  }\n  return null\n}\n\nexport { _register }\n","import { _isValidArgument } from './utils'\n\nconst __removeFrom = actions => action => {\n  const index = actions.findIndex(({ message }) => message === action)\n  if (index === -1) {\n    console.warn(`WARN! Impossible to unregister ${action}.\\n${action} is not a registered action for this worker.`)\n    return []\n  }\n  return actions.splice(index, 1)\n}\n\nconst __errorMsg = msg => `You should provide an array of strings or a string.\\nReceived: ${JSON.stringify(msg)}`\n\nconst _unregister = actions => (msg = null) => {\n  if (_isValidArgument(msg)(['string', 'stringsArray'])(__errorMsg(msg))) {\n    const __remove = __removeFrom(actions)\n\n    if (Array.isArray(msg)) {\n      const removed = msg.reduce((removed, action) => {\n        removed = removed.concat(__remove(action))\n        return removed\n      }, [])\n\n      if (removed.length === 0) {\n        console.warn(`WARN! Impossible to unregister ${JSON.stringify(msg)}.\\nNone of the actions is a registered action for this worker.`)\n        return null\n      }\n      return removed\n    }\n    return __remove(msg)\n  }\n\n  return null\n}\n\nexport { _unregister }\n","import { _post } from './_post'\nimport { _postAll } from './_postAll'\nimport { _register } from './_register'\nimport { _unregister } from './_unregister'\n\nconst _createReusableWorker = actions => {\n  return {\n    actions: actions,\n    postMessage: _post(actions),\n    postAll: _postAll,\n    register: _register(actions),\n    unregister: _unregister(actions)\n  }\n}\n\nexport { _createReusableWorker }\n","import { _isValidArgument } from './utils'\nimport { _createReusableWorker } from './_createReusableWorker'\n\nconst __errorMsg = actions =>\n  'You should provide an array of objects ' +\n  'and every action should be an object containing two fields: `message` and `func`.' +\n  `\\nReceived: ${JSON.stringify(actions)}`\n\nconst _create = (actions = []) => {\n  if (_isValidArgument(actions)('objectsArray')(__errorMsg(actions))) {\n    return _createReusableWorker(actions)\n  }\n  return null\n}\n\nexport { _create }\n","import { _create } from './_create'\nimport { _run } from './_run'\n\nlet WorkerWrapper = null\n\nif (window.Worker) {\n  WorkerWrapper = {\n    create: _create,\n    run: _run\n  }\n} else {\n  console.warn('Your browser does not support Workers.')\n}\n\nexport default WorkerWrapper\n"],"names":["_postAll","arr","Array","isArray","error","TypeError","__errorMsg","__isArraysArray","_isArrayOfArrays","__isObjectsArray","_isArrayOfObjects","__isStringsArray","_isArrayOfStrings","length","Promise","all","this","actions","map","message","_this","postMessage","msg","some","obj","hasOwnProperty","__errorMsgWrongObjects","args","__errorMsgWrongLenght","index","__invalidActions","types","action","__isArrayOf","testItems","type","item","every","__isValidArgument","arg","undefined","__wrongType","toString","_isValidArgument","errorMsg","valid","console","__disposablePost","resolve","reject","onmessage","event","data","onerror","e","lineno","filename","_createDisposableWorker","URL","window","webkitURL","blob","Blob","response","worker","Worker","createObjectURL","post","__createSinglePromise","__makeResponse","work","__run","JSON","stringify","err","_run","errors","__errorMsgWork","__errorMsgArgs","push","_post","filter","func","pop","warn","expectedLength","actualLength","__pushInto","_register","forEach","__removeFrom","findIndex","splice","_unregister","__remove","removed","reduce","concat","_createReusableWorker","_create","WorkerWrapper"],"mappings":"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"}