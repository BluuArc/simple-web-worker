{"version":3,"file":"sww.min.js","sources":["../src/postAll.js","../src/utils/isArrayOf.js","../src/utils/validation.js","../src/utils.js","../src/createDisposableWorker.js","../src/run.js","../src/post.js","../src/register.js","../src/unregister.js","../src/create.js","../src/index.js"],"sourcesContent":["import { invalidObjectsArray, isArrayOf, notArray, returnNull, wrongLength, wrongObjects } from './utils'\n\nexport function postAll (arr = []) {\n  if (!Array.isArray(arr)) return returnNull(notArray(arr))\n\n  const isArraysArray = isArrayOf('arrays')(arr)\n  const isObjectsArray = isArrayOf('objects')(arr)\n  const isStringsArray = isArrayOf('strings')(arr)\n\n  if (!(isArraysArray || isObjectsArray || isStringsArray)) return returnNull(notArray(arr))\n\n  if (arr.length === 0) return Promise.all(this.actions.map(({ message }) => this.postMessage(message)))\n\n  if (isStringsArray) return Promise.all(arr.map(msg => this.postMessage(msg)))\n\n  if (isObjectsArray) {\n    if (invalidObjectsArray(arr)(['message', 'args'])) return returnNull(wrongObjects(arr))\n    return Promise.all(arr.map(({ message, args }) => this.postMessage(message, args)))\n  }\n\n  if (isArraysArray) {\n    if (arr.length !== this.actions.length) {\n      return returnNull(wrongLength(arr.length)(this.actions.length))\n    }\n    return Promise.all(arr.map((args, index) => this.postMessage(this.actions[index].message, args)))\n  }\n}\n","export const isArrayOf = type => arr => {\n  let testItems = null\n  if (type === 'arrays') testItems = item => Array.isArray(item)\n  if (type === 'objects') testItems = item => typeof item === 'object' && !Array.isArray(item)\n  if (type === 'strings') testItems = item => typeof item === 'string'\n\n  if (testItems) return arr.every(testItems)\n  return false\n}\n","const notValid = argumentError => {\n  console.error(argumentError)\n  return false\n}\n\nconst invalidActions = (actions = null) => (types = null) => {\n  if (Array.isArray(actions)) {\n    if (types === 'objectsArray' || types === 'actionsArray') return actions.some(action => typeof action !== 'object' || Array.isArray(action) || action === null)\n    if (types === 'stringsArray') return actions.some(action => typeof action !== 'string')\n  }\n  return false\n}\n\nconst isValidArg = arg => (types = null) => {\n  if (types === 'null') return arg === null\n\n  if (types === 'undefined') return arg === undefined\n\n  if (Array.isArray(types)) return types.some(type => isValidArg(arg)(type))\n\n  if (!arg || wrongType(arg, types) || invalidActions(arg)(types)) return false\n  return true\n}\n\nconst wrongType = (obj = null, type = '') => {\n  if (Array.isArray(type)) return type.every(type => wrongType(obj, type))\n\n  if (Array.isArray(obj)) {\n    if (type === 'actionsArray') return invalidObjectsArray(obj)(['message', 'func'])\n    if (type === 'objectsArray' || type === 'stringsArray' || type === 'array') return false\n    return true\n  }\n\n  return typeof obj !== type.toString() // eslint-disable-line\n}\n\nexport const invalidObjectsArray = arr => fields =>\n  arr.some(obj => !fields.every(field => obj.hasOwnProperty(field)))\n\nexport const isValidArgument = arg => (types = null) => (argumentError = null) => {\n  if (Array.isArray(types)) {\n    if (types.some(type => isValidArg(arg)(type))) return true\n\n    return notValid(argumentError)\n  }\n\n  if (!arg || wrongType(arg, types) || invalidActions(arg)(types)) return notValid(argumentError)\n  return true\n}\n","import { isArrayOf } from './utils/isArrayOf'\nimport { isValidArgument, invalidObjectsArray } from './utils/validation'\n\nconst argumentError = ({ expected = '', received, extraInfo = '' }) => {\n  try {\n    return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived: ' + JSON.stringify(received)}`)\n  } catch (err) {\n    if (err.message === 'Converting circular structure to JSON') {\n      return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived a circular structure: ' + received}`)\n    }\n    console.error(err)\n    return new TypeError('You should provide something else...')\n  }\n}\n\nconst filterActions = (actions, msg) =>\n  actions\n    .filter(({ message }) => JSON.stringify(message) === JSON.stringify(msg))\n    .map(action => action.func)\n    .pop()\n\nconst removeFrom = actions => action => {\n  const index = actions.findIndex(({ message }) => message === action)\n  if (index === -1) {\n    console.warn(`WARN! Impossible to unregister ${action}.\\n${action} is not a registered action for this worker.`)\n    return []\n  }\n  return actions.splice(index, 1)\n}\n\nconst makeResponse = work => `\n  self.onmessage = event => {\n    const args = event.data.message.args\n    if (args) {\n      self.postMessage((${work}).apply(null, args))\n      return close()\n    }\n    self.postMessage((${work})())\n    return close()\n  }\n`\n\nconst pushInto = actions => action => actions.push(action)\n\nconst notArray = arr => argumentError(notArrayOptions(arr))\nconst notArrayOptions = arr => {\n  return {\n    expected: 'an array of strings, an array of objects, an array of arrays or no arguments',\n    received: arr\n  }\n}\n\nconst wrongLength = actualLength => expectedLength =>\n  argumentError(wrongLengthOptions(actualLength)(expectedLength))\nconst wrongLengthOptions = actualLength => expectedLength => {\n  return {\n    received: actualLength,\n    expected: 'the same number of [args] as the number of registered actions on the worker',\n    extraInfo: `This worker has ${expectedLength} actions registered`\n  }\n}\n\nconst wrongObjects = arr => argumentError(wrongObjectsOptions(arr))\nconst wrongObjectsOptions = arr => {\n  return {\n    expected: arr,\n    extraInfo: 'Every object of the array must contain the following fields:\\n* message\\n* args'\n  }\n}\n\nconst returnNull = error => {\n  console.error(error)\n  return null\n}\n\nexport {\n  argumentError,\n  filterActions,\n  invalidObjectsArray,\n  isArrayOf,\n  isValidArgument,\n  makeResponse,\n  notArray,\n  pushInto,\n  removeFrom,\n  returnNull,\n  wrongLength,\n  wrongObjects\n}\n","export const createDisposableWorker = response => {\n  const URL = window.URL || window.webkitURL\n  const blob = new Blob([response], { type: 'application/javascript' }) // eslint-disable-line\n  const worker = new Worker(URL.createObjectURL(blob)) // eslint-disable-line\n  worker.post = message =>\n    new Promise((resolve, reject) => {\n      worker.onmessage = event => resolve(event.data)\n      worker.onerror = e => {\n        console.error(`Error: Line ${e.lineno} in ${e.filename}: ${e.message}`)\n        reject(e)\n      }\n      worker.postMessage({ message })\n    })\n  return worker\n}\n","import { argumentError, isValidArgument, makeResponse } from './utils'\nimport { createDisposableWorker } from './createDisposableWorker'\n\nexport const run = (work = null, args) => {\n  if (!isValidArgument(work)('function')(argumentError({ expected: 'a function', received: work }))) {\n    return null\n  }\n  if (!isValidArgument(args)(['array', 'undefined'])(argumentError({ expected: 'an array', received: args }))) {\n    return null\n  }\n  const response = makeResponse(work)\n  return createDisposableWorker(response).post({ args })\n}\n","import { argumentError, filterActions, isValidArgument } from './utils'\nimport { run } from './run'\n\nexport const post = actions => (msg = null, args) => {\n  const validWork = isValidArgument(msg)('string')(argumentError({ expected: 'a string', received: msg }))\n  const validArgs = isValidArgument(args)(['array', 'undefined'])(argumentError({ expected: 'an array', received: args }))\n  if (validWork && validArgs) {\n    let work = filterActions(actions, msg)\n\n    if (!work) {\n      work = msg => {\n        console.warn(`WARN! ${msg} is not a registered action for this worker`)\n        return `${msg} is not a registered action for this worker`\n      }\n      args = JSON.stringify(msg)\n      return run(work, [args])\n    }\n    if (args) return run(work, args)\n\n    return run(work)\n  }\n  return null\n}\n","import { argumentError, isValidArgument, pushInto } from './utils'\n\nexport const register = actions => (action = null) => {\n  const options = {\n    expected: 'an array of actions or an action',\n    received: action,\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\n  }\n  if (isValidArgument(action)(['object', 'objectsArray'])(argumentError(options))) {\n    if (Array.isArray(action)) {\n      action.forEach(pushInto(actions))\n      return actions.length\n    }\n    return pushInto(actions)(action)\n  }\n  return null\n}\n","import { argumentError, isValidArgument, removeFrom } from './utils'\n\nexport const unregister = actions => (msg = null) => {\n  const options = {\n    expected: 'an array of strings or a string',\n    received: msg\n  }\n  if (isValidArgument(msg)(['string', 'stringsArray'])(argumentError(options))) {\n    const remove = removeFrom(actions)\n\n    if (Array.isArray(msg)) {\n      const removed = msg.reduce((removed, action) => {\n        removed = removed.concat(remove(action))\n        return removed\n      }, [])\n\n      if (removed.length === 0) {\n        console.warn(`WARN! Impossible to unregister ${JSON.stringify(msg)}.` +\n                    '\\nNone of the actions is a registered action for this worker.')\n        return null\n      }\n      return removed\n    }\n\n    return remove(msg)\n  }\n\n  return null\n}\n","import { argumentError, isValidArgument } from './utils'\nimport { post } from './post'\nimport { postAll } from './postAll'\nimport { register } from './register'\nimport { unregister } from './unregister'\n\nconst options = actions => {\n  return {\n    expected: 'an array of objects',\n    received: actions,\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\n  }\n}\n\nexport const create = (actions = []) => {\n  if (isValidArgument(actions)('actionsArray')(argumentError(options(actions)))) {\n    return {\n      actions: actions,\n      postMessage: post(actions),\n      postAll: postAll,\n      register: register(actions),\n      unregister: unregister(actions)\n    }\n  }\n  return null\n}\n","import { create } from './create'\nimport { run } from './run'\n\nconst createWrapper = () => {\n  if (!window.Worker) {\n    console.error('This browser does not support Workers.')\n    return null\n  }\n  if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\n    console.error('This browser does not have URL.createObjectURL method.')\n    return null\n  }\n  return { create, run }\n}\n\nconst WorkerWrapper = createWrapper()\n\nexport default WorkerWrapper\n"],"names":["postAll","arr","Array","isArray","returnNull","notArray","isArraysArray","isArrayOf","isObjectsArray","isStringsArray","length","Promise","all","this","actions","map","message","_this","postMessage","msg","invalidObjectsArray","wrongObjects","args","wrongLength","index","testItems","type","item","every","notValid","error","argumentError","invalidActions","types","some","action","isValidArg","arg","undefined","wrongType","obj","toString","fields","hasOwnProperty","field","isValidArgument","expected","received","extraInfo","TypeError","JSON","stringify","err","filterActions","filter","func","pop","removeFrom","findIndex","warn","splice","makeResponse","work","pushInto","push","notArrayOptions","wrongLengthOptions","actualLength","expectedLength","wrongObjectsOptions","createDisposableWorker","URL","window","webkitURL","blob","Blob","response","worker","Worker","createObjectURL","post","resolve","reject","onmessage","event","data","onerror","e","lineno","filename","run","validWork","validArgs","register","options","forEach","unregister","remove","removed","reduce","concat","create","createWrapper","WorkerWrapper"],"mappings":"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"}